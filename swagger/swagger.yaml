openapi: 3.0.0
info:
  title: Spongebob API
  version: 1.0.0
servers:
  - url: http://localhost:3030
paths:
  /api/neo4j/internal-api/keys.txt:
    get:
      tags:
        - Neo4J
      summary: get secret
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/neo4j/characters:
    get:
      tags:
        - Neo4J
      summary: Get all characters
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Neo4J
      summary: Create new character
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  example: Squidward
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/neo4j/places:
    post:
      tags:
        - Neo4J
      summary: Create new place
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  example: Rock Bottom
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Neo4J
      summary: Get all places
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/neo4j/raw:
    post:
      tags:
        - Neo4J
      summary: Run arbitrary query
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                query:
                  type: string
                  example: MATCH (p:Place) RETURN p
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/neo4j/characters/name/{name}:
    get:
      tags:
        - Neo4J
      summary: Get character by name
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/neo4j/all:
    get:
      tags:
        - Neo4J
      summary: Get all data
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/neo4j/places/name/{name}:
    get:
      tags:
        - Neo4J
      summary: Get place by name
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/neo4j/characters/id/{id}:
    get:
      tags:
        - Neo4J
      summary: Get character by id
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
      delete:
        tags:
          - Neo4J
        summary: DELETE character by id
        responses:
          '200':
            description: Successful response
            content:
              application/json: { }
  /api/neo4j/places/id/{id}:
    get:
      tags:
        - Neo4J
      summary: Get place by id
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Neo4J
      summary: DELETE place by id
      responses:
        '200':
          description: Successful response
          content:
            application/json: { }
  /api/neo4j/characters/name/NONEXIST' OR 1=1  return c//:
    get:
      tags:
        - Neo4J
      summary: 'Bonus: Injection get all characters'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/redisgraph/internal-api/keys.txt:
    get:
      tags:
        - RedisGraph
      summary: get secret
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/redisgraph/characters:
    get:
      tags:
        - RedisGraph
      summary: Get all characters
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - RedisGraph
      summary: Create new character
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  example: Patrick
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/redisgraph/places:
    post:
      tags:
        - RedisGraph
      summary: Create new place
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  example: Rock Bottom
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - RedisGraph
      summary: Get all places
      responses:
        '200':
          description: Successful response
          content:
#            application/json: {}
  /api/neo4j/places/id/7:
    delete:
      tags:
        - RedisGraph
      summary: DELETE place by id
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/redisgraph/raw:
    post:
      tags:
        - RedisGraph
      summary: Run arbitrary query
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                query:
                  type: string
                  example: MATCH (p:Place) RETURN p
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/redisgraph/characters/name/{name}:
    get:
      tags:
        - RedisGraph
      summary: Get character by name
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/redisgraph/characters/name/Squidward' OR 1=1  return c//:
    get:
      tags:
        - RedisGraph
      summary: 'Bonus: Injection get all characters'
      responses:
        '200':
          description: Successful response   
          content:
            application/json: {}
  /api/redisgraph/all:
    get:
      tags:
        - RedisGraph
      summary: Get all data
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/redisgraph/places/name/{name}:
    get:
      tags:
        - RedisGraph
      summary: Get place by name
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/redisgraph/characters/id/{id}:
    get:
      tags:
        - RedisGraph
      summary: Get character by id
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - RedisGraph
      summary: DELETE character by id
      responses:
        '200':
          description: Successful response
          content:
            application/json: { }
  /api/redisgraph/places/id/{id}:
    get:
      tags:
        - RedisGraph
      summary: Get place by id
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
